#!/usr/bin/env python

import argparse

units_dict = {
    'B': 0,
    'KB': 1,
    'MB': 2,
    'GB': 3,
    'TB': 4,
    'PB': 5
}


class Memory:
    def __init__(self, size, unit):
        self.size = size
        self.unit = unit

    def convert_memory_size(self, to_unit):
        if to_unit not in units_dict:
            raise ValueError("Invalid target unit")
        size_in_bytes = self.size * (1024 ** units_dict[self.unit])
        size_in_target_unit = size_in_bytes / (1024 ** units_dict[to_unit])
        return size_in_target_unit, to_unit


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert memory sizes to other memory sizes')
    parser.add_argument('size', type=int, help='Size of memory to convert')
    parser.add_argument('unit', choices=[
                        'B', 'KB', 'MB', 'GB', 'TB', 'PB'], help='Unit of memory size')
    parser.add_argument('--to', dest='to_unit', choices=[
                        'B', 'KB', 'MB', 'GB', 'TB', 'PB'], help='Target unit of memory size')
    args = parser.parse_args()

    memory = Memory(args.size, args.unit)
    size_in_target_unit, target_unit = memory.convert_memory_size(
        args.to_unit) if args.to_unit else (None, None)

    print(f"{memory.size} {memory.unit} is equivalent to:")
    print(f"{memory.size * (1024 ** units_dict[memory.unit])} B")
    if size_in_target_unit:
        print(f"{size_in_target_unit:.2f} {target_unit}")
